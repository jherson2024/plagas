#auth.py
from passlib.context import CryptContext
from datetime import datetime, timedelta
from jose import JWTError, jwt
from fastapi import Depends, HTTPException
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session
from models import Usuario
from database import get_db
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="login")
# Configuraci칩n del hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# Configuraci칩n del token JWT
SECRET_KEY = "tu_clave_secreta_super_segura"  # 游댏 Reemplaza esto por una clave segura
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60  # Token v치lido por 60 minutos

# Funci칩n para hashear contrase침as
def hashear_contrase침a(contrase침a: str) -> str:
    return pwd_context.hash(contrase침a)

# Funci칩n para verificar contrase침as
def verificar_contrase침a(contrase침a_plana: str, contrase침a_hashed: str) -> bool:
    return pwd_context.verify(contrase침a_plana, contrase침a_hashed)

# Funci칩n para crear token JWT
def crear_token_acceso(data: dict, expires_delta: timedelta = None) -> str:
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

def obtener_usuario_actual(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)) -> Usuario:
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        usuario_id: int = int(payload.get("sub"))
    except Exception as e:
        raise HTTPException(status_code=401, detail="Token inv치lido o expirado")
    
    usuario = db.query(Usuario).filter(Usuario.UsuCod == usuario_id).first()
    if not usuario:
        raise HTTPException(status_code=404, detail="Usuario no encontrado")

    return usuario
